c
exit
c
c!
c
exit
increment
update_probability_for_ship_position(grid, row, col, IRREGULAR_SHIP_VERTICAL, increment)
can_whole_ship_be_here?(row, col)
exit
c!
c
grid
c
grid
c
grid
exit
grid
update_probability_for_ship_position(grid, row, col, IRREGULAR_SHIP_HORIZONTAL, increment) if can_whole_ship_be_here?(row, col, IRREGULAR_SHIP_HORIZONTAL)
c
update_probability_for_ship_position(grid, row, col, IRREGULAR_SHIP_HORIZONTAL, increment) if can_whole_ship_be_here?(row, col, IRREGULAR_SHIP_HORIZONTAL)
grid
exit
c
exit
can_irregular_ship_be_here?(5, 11)
row
exit
exit)
can_irregular_ship_be_here?(row, col)
exit
c
exit
c
c!
c
c!
col
row
ship_shape[row - 1 + r][col - 2 + c] == 'I'
grid[r][c]
ship_shape[row - 1 + r][col - 2 + c]
c
c!
c
ship_shape[row - 1 + r][col - 2 + c]
c
ship_shape[row - 1 + r][col - 2 + c]
c
ship_shape[row - 1 + r][col - 2 + c]
c
ship_shape[row - 1 + r][col - 2 + c]
c
c!
col - 2 + c
n
col - 2 + c
scol - 2 + c
row - 1 + r
row - 1 + r]
ship_shape[row - 1 + r][col - 2 + c]
s
ship_shape[row - 1 + r][col - 2 + c]s
ship_shape[row - 1 + r][col - 2 + c]
col
row
(row - 1..row + 1)
(col - 2..col + 2)
c
col
row
c
n
ship_shape[r - col + 2][c - row + 1] == 'I'
n
ship_shape[r - col + 2][c - row + 1] == 'I'
n
ship_shape[r - col + 2][c - row + 1] == 'I'
n
ship_shape[r - col + 2][c - row + 1] == 'I'
ship_shape[0][0]
ship_shape
c - row + 1
r - col + 2
col
r
ship_shape[r - col + 2][c - row + 1]
s
row
s
col
c
exit
update_probability_for_ship_position(grid, row, col, Constants::IRREGULAR_SHIP_HORIZONTAL, increment)
ship_shape
col
row
grid
update_probability_for_ship_position(grid, row, col, ship_shape, increment)
c!
5 / 2
c
exit
c!
exit
c!
c
exit
c
C
c
exit
c
exit
ewxit
c1
c
c!
c
c!
c1
c
c!
api.print_probability_grid(probability_grid)
c!
c
c!
can_irregular_ship_be_here?(10,5)
can_irregular_ship_be_here?(11,5)
can_irregular_ship_be_here?(11,4)
can_irregular_ship_be_here?(11,1)
can_irregular_ship_be_here?(11,2)
can_irregular_ship_be_here?(2,0)
can_irregular_ship_be_here?(6,0)
can_irregular_ship_be_here?(10,0)
can_irregular_ship_be_here?(10,10)
can_irregular_ship_be_here?(11,11)
can_irregular_ship_be_here?(1,1)
can_irregular_ship_be_here?(0,0)
can_irregular_ship_be_here?(9,9)
can_irregular_ship_be_here?(5,5)
can_irregular_ship_be_here?(9,9)
can_irregular_ship_be_here?(10,10)
can_irregular_ship_be_here?(11,11)
can_irregular_ship_be_here?(12,12)
can_irregular_ship_be_here?(12,0)
can_irregular_ship_be_here?(11,0)
c
exit
c
grid[grid_row][grid_col]
n
grid[grid_row][grid_col]
c
exit
grid[grid_row][grid_col]
c
c!
grid[grid_row][grid_col]
c
c!
grid
c
calculate_probability_score(probability_grid, row, col, ship_shape)
probability_score
c
cc
c
exit
c
c!
c
c!
c
can_irregular_ship_be_here?(0, 12)
can_irregular_ship_be_here?(12, 0)
can_irregular_ship_be_here?(12, col)
can_irregular_ship_be_here?(10, col)
can_irregular_ship_be_here?(row, col)
col
row
c
c!
c
c!
api.print_probability_grid(probability_grid)
probability_grid
update_grid_with_irregular_ship_probabilities(probability_grid)
probability_grid.size
probability_grid
n
c!
initialize_probability_grid
def initialize_probability_grid
    Array.new(Constants::GRID_SIZE) { Array.new(Constants::GRID_SIZE, 1.0 / (Constants::GRID_SIZE * Constants::GRID_SIZE)) }
  end
probability_grid
exit
c
probability_grid
calculate_probability_score(probability_grid, row, col, ship_shape)
[row, col]
c!
probability_grid
calculate_probability_score(probability_grid, row, col, ship_shape)
c!
c
can_irregular_ship_be_here?(row, col)
[row, col]
c
can_irregular_ship_be_here?(row, col)
[row, col]
c
can_irregular_ship_be_here?(row, col)
[row, col]
c
[row, col]
c
[row, col]
c
[row, col]
n
[row, col]
n
[row, col]
can_irregular_ship_be_here?(row, col)
n
can_irregular_ship_be_here?(row, col)
col
row
c
col
row
can_irregular_ship_be_here?(row, col)
c!
c
col
grid
row
calculate_probability_score(probability_grid, row, col, ship_shape)
col
row
can_place_whole_irregular_ship?(row, col, ship_shape)
n
valid_coordinates?(row, col)
valid_coordinates?(row, col + c)
valid_coordinates?(row + r, col + c)
cell
r
ship_row
ship_shape
col
row
 valid_coordinates?(row + r, col + c)
cell
