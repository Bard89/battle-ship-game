c!
c
can_irregular_ship_be_here?(row, col)
[row, col]
c
can_irregular_ship_be_here?(row, col)
[row, col]
c
can_irregular_ship_be_here?(row, col)
[row, col]
c
[row, col]
c
[row, col]
c
[row, col]
n
[row, col]
n
[row, col]
can_irregular_ship_be_here?(row, col)
n
can_irregular_ship_be_here?(row, col)
col
row
c
col
row
can_irregular_ship_be_here?(row, col)
c!
c
col
grid
row
calculate_probability_score(probability_grid, row, col, ship_shape)
col
row
can_place_whole_irregular_ship?(row, col, ship_shape)
n
valid_coordinates?(row, col)
valid_coordinates?(row, col + c)
valid_coordinates?(row + r, col + c)
cell
r
ship_row
ship_shape
col
row
 valid_coordinates?(row + r, col + c)
cell
c
cell
ship_shape
col
row
exit
can_place_whole_irregular_ship?(row, col, ship_shape)
col
row
c!
c
api.print_probability_grid(probability_grid)
probability_grid
c
target_irregular_ship(probability_grid)
api.avengerAvailable
api
c
response = game.test_status
c
response = game.test_status
c
response = game.test_status
c
ap response.parsed_response
response = game.test_reset
c
ap response.parsed_response
response = game.test_reset
c
ap response.parsed_response
response = game.test_fire(6, 7)
c
require 'awesome_print'
puts JSON.pretty_generate(parsed_json)
parsed_json = JSON.parse(response.body)
require 'json'
game.print_grid(response.parsed_response["grid"])
response = game.test_fire_with_avenger(11,11, 'thor')
game.print_grid(response.parsed_response["grid"])
response = game.test_fire_with_avenger(5,5, 'thor')
c
response = test_avenger(5,5, 'thor')
response = test_avenger(5,5,thor)
response = test_avenger(thor)
  def test_avenger(row, column, avenger)
    self.class.get("/fire/#{row}/#{column}/avenger/#{avenger}?test=yes", @options)
  end
 def test_avenge(row, column, avenger)
    self.class.get("/fire/#{row}/#{column}/avenger/#{avenger}?test=yes", @options)
  end
game.print_grid(response.parsed_response["grid"])
response = game.test_fire(10, 7)
response = game.test_fire(10, 5)
game.print_grid(response.parsed_response["grid"])
response = game.test_fire(9, 8)
game.print_grid(response.parsed_response["grid"])
response = game.test_fire(9, 7)
response = game.test_fire(9, 5)
response = game.test_fire(9, 4)
game.print_grid(response.parsed_response["grid"])
response = game.test_fire(9, 6)
game.print_grid(response.parsed_response["grid"])
response = game.test_fire(6, 9)
game.print_grid(response.parsed_response["grid"])
response = game.test_fire(6, 7)
game.test_fire(6, 7)
game
c
MapGenerator.new
c!
c
api.print_probability_grid(probability_grid)
Helpers.print_probability_grid(probability_grid)
print_probability_grid(probability_grid)
7932726, 0.00700770847932726, 0.00700770847932726, 0.00700770847932726, 0.00700770847932726], [0.00700770847932726, 0.00700770847932726, 0.00700770847932726, 0.00700770847932726,
probability_grid
c!
c
update_probability_grid
c
Algos.brute_force(api)
api = MockBattleshipAPI.new
Algos.brute_force(api)
api
algorithm.brute_force(api)
api
algorithm
algorithm.call(api)
api.reset
c
valid_target?(grid, r, column)
c
valid_target?(grid, r, column)
c
adjacent_cells = [[row - 1, col], [row + 1, col], [row, col - 1], [row, col + 1]]
col
row
row, col
1000.times { |_| p adjacent_cells.shuffle.find { |r, column| valid_target?(grid, r, column) } }
100.times { |_| p adjacent_cells.shuffle.find { |r, column| valid_target?(grid, r, column) } }
100.times { |_| adjacent_cells.shuffle.find { |r, column| valid_target?(grid, r, column) } }
adjacent_cells.shuffle.find { |r, column| valid_target?(grid, r, column) }[C
adjacent_cells.shuffle.find { |r, column| valid_target?(grid, r, column) }
valid_target?(grid, r, column)
c
valid_target?(grid, r, column)
c
valid_target?(grid, r, column)
grid
r
column
c!
c
r
valid_target?(grid, r, c)
c!
c
grid
find_next_target(api.grid, last_hit)
api.grid
grid
valid_target?(grid, r, c)
adjacent_cells.shuffle
adjacent_cells
adjacent_cells.shuffle.find { |r, c| valid_target?(grid, r, c) }
adjacent_cells = [[row - 1, col], [row + 1, col], [row, col - 1], [row, col + 1]]
row, col = last_hit
last_hit
find_next_target(api.grid, last_hit)
  def find_next_target(grid, last_hit)
    row, col = last_hit
    adjacent_cells = [[row - 1, col], [row + 1, col], [row, col - 1], [row, col + 1]]
    adjacent_cells.shuffle.find { |r, c| valid_target?(grid, r, c) }
  end
last_hit
api.grid
find_next_target(api.grid, last_hit)
row, col = if target_mode && last_hit
                   find_next_target(api.grid, last_hit)
                 else
                   find_random_target(api.grid)
                 end
c!
c
c!
c
find_next_target(api.grid, last_hit)
if target_mode && last_hit
                   find_next_target(api.grid, last_hit)
                 else
                   find_random_target(api.grid)
                 end
target_mode
target_mode && last_hit
c
last_hit
lsst_hit
row
find_next_target(api.grid, last_hit)
find_random_target(api.grid)
c
column
row
c
c!
col
api.fire(1, 1)
response
row
c!
row
c!
c
response
c
response
c
response
c
response
c
response
c
response
c
response
c
response
c
response
c
response
c
vc
response = api.fire(row, col)
c
response = api.fire(3, 2)
response = api.fire(3, 3)
api.print_grid(response["grid"])
response = api.fire(row, col)
api.print_grid(response["grid"])
col
row
n
row
