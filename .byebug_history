c
Algos.brute_force(api)
api = MockBattleshipAPI.new
Algos.brute_force(api)
api
algorithm.brute_force(api)
api
algorithm
algorithm.call(api)
api.reset
c
valid_target?(grid, r, column)
c
valid_target?(grid, r, column)
c
adjacent_cells = [[row - 1, col], [row + 1, col], [row, col - 1], [row, col + 1]]
col
row
row, col
1000.times { |_| p adjacent_cells.shuffle.find { |r, column| valid_target?(grid, r, column) } }
100.times { |_| p adjacent_cells.shuffle.find { |r, column| valid_target?(grid, r, column) } }
100.times { |_| adjacent_cells.shuffle.find { |r, column| valid_target?(grid, r, column) } }
adjacent_cells.shuffle.find { |r, column| valid_target?(grid, r, column) }[C
adjacent_cells.shuffle.find { |r, column| valid_target?(grid, r, column) }
valid_target?(grid, r, column)
c
valid_target?(grid, r, column)
c
valid_target?(grid, r, column)
grid
r
column
c!
c
r
valid_target?(grid, r, c)
c!
c
grid
find_next_target(api.grid, last_hit)
api.grid
grid
valid_target?(grid, r, c)
adjacent_cells.shuffle
adjacent_cells
adjacent_cells.shuffle.find { |r, c| valid_target?(grid, r, c) }
adjacent_cells = [[row - 1, col], [row + 1, col], [row, col - 1], [row, col + 1]]
row, col = last_hit
last_hit
find_next_target(api.grid, last_hit)
  def find_next_target(grid, last_hit)
    row, col = last_hit
    adjacent_cells = [[row - 1, col], [row + 1, col], [row, col - 1], [row, col + 1]]
    adjacent_cells.shuffle.find { |r, c| valid_target?(grid, r, c) }
  end
last_hit
api.grid
find_next_target(api.grid, last_hit)
row, col = if target_mode && last_hit
                   find_next_target(api.grid, last_hit)
                 else
                   find_random_target(api.grid)
                 end
c!
c
c!
c
find_next_target(api.grid, last_hit)
if target_mode && last_hit
                   find_next_target(api.grid, last_hit)
                 else
                   find_random_target(api.grid)
                 end
target_mode
target_mode && last_hit
c
last_hit
lsst_hit
row
find_next_target(api.grid, last_hit)
find_random_target(api.grid)
c
column
row
c
c!
col
api.fire(1, 1)
response
row
c!
row
c!
c
response
c
response
c
response
c
response
c
response
c
response
c
response
c
response
c
response
c
response
c
vc
response = api.fire(row, col)
c
response = api.fire(3, 2)
response = api.fire(3, 3)
api.print_grid(response["grid"])
response = api.fire(row, col)
api.print_grid(response["grid"])
col
row
n
row
n
row
response
c!
response["result"]
response = api.fire(row, column)
response["result"]
api.fire(row, column)
c
api.fire(0,6)
api.fire(0,5)
api.fire(0,4)
api.fire(0,3)
api.fire(0,1)
api.fire(0,2)
api.fire(1,2)
api.fire(1,1)
api = MockBattleshipAPI.new
api.fire(1,1)
api.reset
api.fire(1,1)
api = MockBattleshipAPI.new
c
api.fire(1,1)
api = MockBattleshipAPI.new
c
api.fire(1,1)
api = MockBattleshipAPI.new
c
api.print_grid(api.fire(1,1)['grid'])
api/print_grid(api.fire(1,1)['grid'])
api.fire(1,1)['grid'].class
api.fire(1,1)['grid']
print_grid(api.fire(1,1)['grid'])
api.fire(1,1)['grid']
parsed_response = api.fire(1,1)['grid']
parsed_response = api.fire(1,1).grid
parsed_response = api.fire(1,1)
parsed_response
api.fire(1,1)
api = MockBattleshipAPI.new
c
Constants::GRID_SIZE
Helpers
HELPERS::GRID_SIZE
::GRID_SIZE
Helpers::GRID_SIZE
GRID_SIZE
c
x
api = MockBattleshipAPI.new
c
api.fire(1,1)
api = MockBattleshipAPI.new
c
api.fire(1,1)
api.print_grid(api.grid.flatten.join)
api = MockBattleshipAPI.new
c
api.print_grid(api.grid.flatten.join)
api = MockBattleshipAPI.new
parsed_response
api.parsed_response
api.parsed_repsonse
api.repsonse
api.grid
api.frid
@grid
2grid
api
api = MockBattleshipAPI.new
c
api = MockBattleshipAPI.new
c!
print_grid
MapGenerator.print_grid
MapGenerator
@map
map
response['grid'].size
response['grid'].count
response['grid']
response.grid
response = api.fire(1,2)
api.fire(1,2)
api = MockBattleshipAPI.new
c
api.fire(1,2)
api.fire(1,1)
api = MockBattleshipAPI.new
api.fire(1,1)
api.reset
api
api = MockBattleshipAPI.new
c
api.reset
api = MockBattleshipAPI.new
api = MockBattleshipAPI.new(MapGenerator.new)
c
api.reset
api = MockBattleshipAPI.new(MapGenerator.new)
c
api.fire(1,7)
api = MockBattleshipAPI.new
c!
api.fire(1,7)
api.fire(1,5)
api.fire(1,2)
api.fire(1,1)
api = MockBattleshipAPI.new
c
api.fire(1,1)
api = MockBattleshipAPI.new
c!
api.fire(1,1)
api = MockBattleshipAPI.new
api
c
api.map_generator
@map_generstor
api.map_generstor
api
api = MockBattleshipAPI.new
c
@map_generator
@map_generator = MapGenerator.new
MapGenerator.new
@map_generator.valid_coordinates?
@map_generator
api.map_generator
