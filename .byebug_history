c!
s
@hit_ships
_
c
ship_hits
c
c!
s
record_hit(target_row, target_col)
ship_hits
result
c!
result
c
result
c
c!
ship_hits
c!
hit_row
hit
ship_hits
c
col
row
c
c!
C!
Coding Arena — Boost your coding skill and win cool prizes — Panaxeo — Crazy good software teams (02_12_2023 23_21_07).htmlC!
C
c!
hits
c
hits
col1
row2
row1
c
adj_col
adj_row
s
col
row
c
hit_col
hit_row
c
hit[0]
hit[0]\
hit[1]
c
hit[1]
hit[0]
hit_row
hit
ship_hits
hit
hit_col
c!
col
row
c!
hits
hit
hit_col
hit_row
hti_row
hit_row, hit_col = hit
c!
@hit_ships
hits
c
col2
col1
row2
row1
row
c
hits
c
c!
c
valid_coordinates?(adj_row, adj_col)
s
[[row - 1, col], [row + 1, col], [row, col - 1], [row, col + 1]]
col
row
s
\s
n
hit_col
hit_row
hit_row, hit_col = hit
hit
s
ship_hits
c!
hit_col
hit_row
ship_hits.all?
ship_hits
c!
col
row
c!
results
c!
c
c!
c
c!
c1
c
c!
c
c!
AlgoHelpers.valid_coordinates?(0, 0)
valid_coordinates?(0, 0)
c!
valid_coordinates?(0, 0)
AlgoHelpers.valid_coordinates?(0, 0)
c!
AlgoHelpers.valid_coordinates?(0, 0)
AlgoHelpers::AlgoHelpers.valid_coordinates?(0, 0
AlgoHelpers
c!
c
respond_to?(:print_probability_grid)
api.print_probability_grid
c!
api.print_probability_grid
respond_to?(:print_probability_grid)
c!
c
c!
Constants::GRID_SIZE
c!
Constants::GRID_SIZE
c!
Constants::GRID_SIZE
Constants
c!
respond_to?(:print_probability_grid)
c!
respond_to?(:print_probability_grid)
c!
respond_to?(:print_probability_grid)
c!
respond_to?(:print_probability_grid)
c
valid_coordinates?(row + row_offset, col + col_offset)
c!
valid_coordinates?(row + row_offset, col + col_offset)
include AlgoHelpers
self
valid_coordinates?(row + row_offset, col + col_offset)
c
valid_coordinates?(row, column)
c!
c
c!
result['grid']
c!
c
c!
c
grid_string
probability_grid
c!
api.grid.flatten.join
api.grid..flatten.join
api.grid
api
api.response
api.respinse
api
c!
    api.print_combined_grid(probability_grid_combined, api.grid)
grid_string
grid_string.chars
c
grid_string.chars
grid_string
c!
grid_string
c!
grid_string.to-s
grid_string
c!
c
c!
c
c!
c
c!
c
n
c!
api
c!
c
c!
c
c!
r_offset
ship_row
c!
ship_shape
c!
c
c!
c
can_whole_even_ship_be_here?(row, col, ship_shape)
[row, col]
c
[row, col]
c
[row, col]
c
can_whole_even_ship_be_here?(row, col, ship_shape)
[row, col]
c
can_whole_even_ship_be_here?(row, col, ship_shape)
[row, col]
c!
[row, col]
can_whole_even_ship_be_here?(row, col, ship_shape)
c
can_whole_even_ship_be_here?(row, col, ship_shape)
c
can_whole_even_ship_be_here?(row, col, ship_shape)
[row, col]
c
can_whole_even_ship_be_here?(row, col, ship_shape)
[row, col]
c
can_whole_even_ship_be_here?(row, col, ship_shape)
[row, col]
c
can_whole_even_ship_be_here?(row, col, ship_shape)
[row, col]
c
can_whole_even_ship_be_here?(row, col, ship_shape)
[row, col]
c!
c1
update_probability_for_ship_position(grid, row, col, ship_shape, Constants::PROBABILITY_INCREMENT, orientation)
[row, col]
[row, col[
orientation
c!
c
half_width_of_the_ship < 0
col + half_length_of_the_ship > Constants::GRID_SIZE - 1
col - half_length_of_the_ship < 0
