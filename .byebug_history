c!
response["result"]
response = api.fire(row, column)
response["result"]
api.fire(row, column)
c
api.fire(0,6)
api.fire(0,5)
api.fire(0,4)
api.fire(0,3)
api.fire(0,1)
api.fire(0,2)
api.fire(1,2)
api.fire(1,1)
api = MockBattleshipAPI.new
api.fire(1,1)
api.reset
api.fire(1,1)
api = MockBattleshipAPI.new
c
api.fire(1,1)
api = MockBattleshipAPI.new
c
api.fire(1,1)
api = MockBattleshipAPI.new
c
api.print_grid(api.fire(1,1)['grid'])
api/print_grid(api.fire(1,1)['grid'])
api.fire(1,1)['grid'].class
api.fire(1,1)['grid']
print_grid(api.fire(1,1)['grid'])
api.fire(1,1)['grid']
parsed_response = api.fire(1,1)['grid']
parsed_response = api.fire(1,1).grid
parsed_response = api.fire(1,1)
parsed_response
api.fire(1,1)
api = MockBattleshipAPI.new
c
Constants::GRID_SIZE
Helpers
HELPERS::GRID_SIZE
::GRID_SIZE
Helpers::GRID_SIZE
GRID_SIZE
c
x
api = MockBattleshipAPI.new
c
api.fire(1,1)
api = MockBattleshipAPI.new
c
api.fire(1,1)
api.print_grid(api.grid.flatten.join)
api = MockBattleshipAPI.new
c
api.print_grid(api.grid.flatten.join)
api = MockBattleshipAPI.new
parsed_response
api.parsed_response
api.parsed_repsonse
api.repsonse
api.grid
api.frid
@grid
2grid
api
api = MockBattleshipAPI.new
c
api = MockBattleshipAPI.new
c!
print_grid
MapGenerator.print_grid
MapGenerator
@map
map
response['grid'].size
response['grid'].count
response['grid']
response.grid
response = api.fire(1,2)
api.fire(1,2)
api = MockBattleshipAPI.new
c
api.fire(1,2)
api.fire(1,1)
api = MockBattleshipAPI.new
api.fire(1,1)
api.reset
api
api = MockBattleshipAPI.new
c
api.reset
api = MockBattleshipAPI.new
api = MockBattleshipAPI.new(MapGenerator.new)
c
api.reset
api = MockBattleshipAPI.new(MapGenerator.new)
c
api.fire(1,7)
api = MockBattleshipAPI.new
c!
api.fire(1,7)
api.fire(1,5)
api.fire(1,2)
api.fire(1,1)
api = MockBattleshipAPI.new
c
api.fire(1,1)
api = MockBattleshipAPI.new
c!
api.fire(1,1)
api = MockBattleshipAPI.new
api
c
api.map_generator
@map_generstor
api.map_generstor
api
api = MockBattleshipAPI.new
c
@map_generator
@map_generator = MapGenerator.new
MapGenerator.new
@map_generator.valid_coordinates?
@map_generator
api.map_generator
api = MockBattleshipAPI.new
c!
api = MockBattleshipAPI.new
api.map_generator
c!
api
api.map_generator
map_generator
api.fire(1,1)
api = MockBattleshipAPI.new
n
c
c!
map_generator = MapGenerator.new
c
@grid
api.print_grid
api.fire(1,1)
MockBattleshipAPI.new
@grid
api.grid
api
api = MockBattleshipAPI.new
x
@grid
MockBattleshipAPI.new
c
c!
c
c!
c
@grid
c
@grid
c
col + ship_size > GRID_SIZE
can_place?(row, col, ship_size, horizontal)
horizontal
col
row
can_place?(row, col, ship_size, horizontal)
n
can_place?(row, col, ship_size, horizontal)
n
can_place?(row, col, ship_size, horizontal)
n
can_place?(row, col, ship_size, horizontal)
n
can_place?(row, col, ship_size, horizontal)
n
can_place?(row, col, ship_size, horizontal)
n
can_place?(row, col, ship_size, horizontal)
can_place?(row, col, ship_size, horizontal
ship_size
@grid
@grid[row][col] = 'S'
@grid
@grid[row][col]
n
@grid[row][col]
horizontal
@grid
n
can_place?(row, col, ship_size, horizontal)
row, col, horizontal = rand(GRID_SIZE), rand(GRID_SIZE), [true, false].sample
placed
c
MockBattleshipAPI.new
c!
c
@grid
(col...(col + ship_size)).each do |i|
        return false if @grid[row][i] != '.'
      end
(col...(col + ship_size)).each do |i|
        return false if @grid[row][i] != '.'
      end
col + ship_size > GRID_SIZE
return false if col + ship_size > GRID_SIZEreturn false if col + ship_size > GRID_SIZE
horizontal
c
horizontal
ship_size
c
ship_size
c
ship_size
c
@grid
c
c!
c
row + ship_size > GRID_SIZE
row + ship_size
horizontal
ship_size
col
row
c!
c
MockBattleshipAPI.new
c!
MockBattleshipAPI.new
c!
MockBattleshipAPI.new
Array.new(GRID_SIZE) { Array.new(GRID_SIZE, '*') }
GRID_SIZE = 12
  SHIPS = [5, 4, 3, 3, 2]
c
Array.new(GRID_SIZE) { Array.new(GRID_SIZE, '*') }
Array.new(GRID_SIZE) { Array.new(GRID_SIZE, '.') }
GRID_SIZE = 12
  SHIPS = [5, 4, 3, 3, 2]
Array.new(GRID_SIZE) { Array.new(GRID_SIZE, '.') }
MockBattleshipAPI.new
c
api = MockBattleshipAPI.new
c
game.test_reset
game.print_grid(response.parsed_response["grid"])
response = game.test_fire(0, 3)
game.print_grid(response.parsed_response["grid"])
game.brute_force
c
game.print_grid(response.parsed_response["grid"])
response = game.test_fire(0, 3)
game.print_grid(response.parsed_response["grid"])
response = game.test_fire(0, 1)
