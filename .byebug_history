c!
c
c!
result['grid']
c!
c
c!
c
grid_string
probability_grid
c!
api.grid.flatten.join
api.grid..flatten.join
api.grid
api
api.response
api.respinse
api
c!
    api.print_combined_grid(probability_grid_combined, api.grid)
grid_string
grid_string.chars
c
grid_string.chars
grid_string
c!
grid_string
c!
grid_string.to-s
grid_string
c!
c
c!
c
c!
c
c!
c
n
c!
api
c!
c
c!
c
c!
r_offset
ship_row
c!
ship_shape
c!
c
c!
c
can_whole_even_ship_be_here?(row, col, ship_shape)
[row, col]
c
[row, col]
c
[row, col]
c
can_whole_even_ship_be_here?(row, col, ship_shape)
[row, col]
c
can_whole_even_ship_be_here?(row, col, ship_shape)
[row, col]
c!
[row, col]
can_whole_even_ship_be_here?(row, col, ship_shape)
c
can_whole_even_ship_be_here?(row, col, ship_shape)
c
can_whole_even_ship_be_here?(row, col, ship_shape)
[row, col]
c
can_whole_even_ship_be_here?(row, col, ship_shape)
[row, col]
c
can_whole_even_ship_be_here?(row, col, ship_shape)
[row, col]
c
can_whole_even_ship_be_here?(row, col, ship_shape)
[row, col]
c
can_whole_even_ship_be_here?(row, col, ship_shape)
[row, col]
c!
c1
update_probability_for_ship_position(grid, row, col, ship_shape, Constants::PROBABILITY_INCREMENT, orientation)
[row, col]
[row, col[
orientation
c!
c
half_width_of_the_ship < 0
col + half_length_of_the_ship > Constants::GRID_SIZE - 1
col - half_length_of_the_ship < 0
[col, row]
c
[col, row]
c
[col, row]
c
[col, row]
c
col - half_length_of_the_ship < 0
ship_shape
col
row
row + half_width_of_the_ship > Constants::GRID_SIZE - 1
row - half_width_of_the_ship < 0
col + half_length_of_the_ship > Constants::GRID_SIZE - 1
if col + half_length_of_the_ship > Constants::GRID_SIZE - 1
half_length_of_the_ship
col
col + half_length_of_the_ship > Constants::GRID_SIZE - 1
col - half_length_of_the_ship < 0
half_width_of_the_ship
half_length_of_the_ship
c!
ship_shape
exit
xexit
c!
api.print_probability_grid(probability_grid)
c!
c
c!
update_probability_for_ship_position(grid, row, col, ship_shape, Constants::PROBABILITY_INCREMENT, orientation)
c
update_probability_for_ship_position(grid, row, col, ship_shape, Constants::PROBABILITY_INCREMENT, orientation)
c!
c
c!
c
update_probability_for_ship_position(grid, row, col, ship_shape, Constants::PROBABILITY_INCREMENT, orientation)
c!
c
c!
c@
c!
c
api.print_probability_grid(probability_grid)
update_probability(probability_grid, target_row, target_col, result['result'])
c
exit
c
c!
c
exit
increment
update_probability_for_ship_position(grid, row, col, IRREGULAR_SHIP_VERTICAL, increment)
can_whole_ship_be_here?(row, col)
exit
c!
c
grid
c
grid
c
grid
exit
grid
update_probability_for_ship_position(grid, row, col, IRREGULAR_SHIP_HORIZONTAL, increment) if can_whole_ship_be_here?(row, col, IRREGULAR_SHIP_HORIZONTAL)
c
update_probability_for_ship_position(grid, row, col, IRREGULAR_SHIP_HORIZONTAL, increment) if can_whole_ship_be_here?(row, col, IRREGULAR_SHIP_HORIZONTAL)
grid
exit
c
exit
can_irregular_ship_be_here?(5, 11)
row
exit
exit)
can_irregular_ship_be_here?(row, col)
exit
c
exit
c
c!
c
c!
col
row
ship_shape[row - 1 + r][col - 2 + c] == 'I'
grid[r][c]
ship_shape[row - 1 + r][col - 2 + c]
c
c!
c
ship_shape[row - 1 + r][col - 2 + c]
c
ship_shape[row - 1 + r][col - 2 + c]
c
ship_shape[row - 1 + r][col - 2 + c]
c
ship_shape[row - 1 + r][col - 2 + c]
c
c!
col - 2 + c
n
col - 2 + c
scol - 2 + c
row - 1 + r
row - 1 + r]
ship_shape[row - 1 + r][col - 2 + c]
s
ship_shape[row - 1 + r][col - 2 + c]s
ship_shape[row - 1 + r][col - 2 + c]
col
row
(row - 1..row + 1)
(col - 2..col + 2)
c
col
row
c
n
ship_shape[r - col + 2][c - row + 1] == 'I'
n
ship_shape[r - col + 2][c - row + 1] == 'I'
n
ship_shape[r - col + 2][c - row + 1] == 'I'
n
ship_shape[r - col + 2][c - row + 1] == 'I'
ship_shape[0][0]
ship_shape
c - row + 1
r - col + 2
col
r
ship_shape[r - col + 2][c - row + 1]
s
row
s
col
c
exit
update_probability_for_ship_position(grid, row, col, Constants::IRREGULAR_SHIP_HORIZONTAL, increment)
ship_shape
col
row
grid
update_probability_for_ship_position(grid, row, col, ship_shape, increment)
c!
5 / 2
c
exit
c!
exit
c!
c
exit
c
C
c
